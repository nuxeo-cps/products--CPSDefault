/*
<dtml-let last_modified="_.DateTime()-14" expires="_.DateTime()+1" >
<dtml-call "REQUEST.RESPONSE.setHeader( 'Content-Type', 'text/javascript' )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Last-Modified', last_modified.toZone('GMT').rfc822() )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Cache-Control', 'max-age=36000, must-revalidate' )">
<dtml-call "REQUEST.RESPONSE.setHeader( 'Expires', expires.toZone('GMT').rfc822() )" >
</dtml-let>
*/
/*
# (C) Copyright 2005 Nuxeo SARL <http://nuxeo.com>
# Author: Tarek Ziad√© <tz@nuxeo.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#
# $Id:$

CPSDefault javascript layer
*/

var CPSContainerEditor = Class.create();

CPSContainerEditor.prototype = {
  initialize: function(draggable_class, droppable_class, droppable_in_class,
                       display_format, working_text, folder_content, ajax_psm,
                       generic_error_msg) {
    this.hooked = false;
    this.working_text = working_text;
    this.ajax_psm = ajax_psm;
    this.folder_content = folder_content;
    this.draggable_class = draggable_class;
    this.droppable_class = droppable_class;
    this.droppable_in_class = droppable_in_class;
    this.generic_error_msg = generic_error_msg;
    this.display_format = display_format;
    this.hookElements();
  },

  onLeaveBlocker: function(event) {
    for (var i = 0; i < this.draggables.length; i++) {
      this.draggable_objects[i].enabled = true;
    }
  },

  onEnterBlocker: function(event) {
    for (var i = 0; i < this.draggable_objects.length; i++) {
      this.draggable_objects[i].enabled = false;
    }
  },

  hookElements: function() {
    if (this.hooked)
      return;

    this.draggables = document.getElementsByClassName(this.draggable_class);
    if (this.draggables.length==0) {
      // nothing to drag
      return;
    }

    this.droppables = document.getElementsByClassName(this.droppable_class);
    if (this.droppables.length==0) {
      // nowhere to drop
      return;
    }
    this.droppables_in = document.getElementsByClassName(this.droppable_in_class);
    this.draggable_objects = [];

    // draggables
    for (var i = 0; i < this.draggables.length; i++) {
      var draggable = this.draggables[i];
      var options = {handle: draggable.id,
                     revert: true};
      this.draggable_objects.push(new Draggable(draggable.id, options));

      // when the mouse is over the blockers
      // we disable dragging so the user does not
      // drag and click in the same time
      var onEnterBlockerListener = this.onEnterBlocker.bindAsEventListener(this);
      var onLeaveBlockerListener = this.onLeaveBlocker.bindAsEventListener(this);
      var blockers = draggable.getElementsByTagName('a');
      for (var y = 0; y < blockers.length; y++) {
        var blocker = blockers[y];
        Event.observe(blocker, 'mouseover', onEnterBlockerListener);
        Event.observe(blocker, 'mouseout', onLeaveBlockerListener);
      }

    }

    // droppables
    var onDropElementBn = this.onDropElement.bind(this);

    for (var i = 0; i < this.droppables.length; i++) {
      var droppable = this.droppables[i];
      var options = {accept: 'draggable', hoverclass: 'drophover',
                     onDrop: onDropElementBn};

      Droppables.add(droppable.id, options);
    }

    for (var i = 0; i < this.droppables_in.length; i++) {
      var droppable = this.droppables_in[i];
      var options = {accept: 'draggable', hoverclass: 'drophover-in',
                     onDrop: onDropElementBn};

      Droppables.add(droppable.id, options);
    }
    this.hooked = true;
  },

  unHookElements: function() {
    if (!this.hooked)
      return;
    for (var i = 0; i < this.droppables.length; i++) {
      var droppable = this.droppables[i];
      Droppables.remove(droppable);
    }

    for (var i = 0; i < this.droppables_in.length; i++) {
      var droppable = this.droppables_in[i];
      Droppables.remove(droppable);
    }

    for (var i = 0; i < this.draggable_objects; i++) {
      var draggable_object = this.draggable_objects[i];
      draggable_object.destroy();
      Droppables.remove(draggable_object);
    }
    this.hooked = false;
  },

  arrayPosition: function(array, element) {
    for (var i=0, length=array.length; i<length; i++) {
      if (array[i] == element) {
        return i;
      }
    }
    return -1;
  },

  rowCompare: function(a, b) {
    var aVal = a.value;
    var bVal = b.value;
    return (aVal == bVal ? 0 : (aVal > bVal ? 1 : -1));
  },

  dropElementCompleted: function(originalRequest) {
    // getting new positions from the server
    result = originalRequest.responseText;

    if (result == '' || result == '_' || result.indexOf('<') != -1) {
      if (result == '')
        this.onFail();
      else
        // no error popping on reordering failures
        this.onComplete();
      return;
    }

    var new_positions = result.split(":");
    for (var i=0, length=new_positions.length; i<length; i++) {
      new_positions[i] = 'draggable' + new_positions[i];
    }

    // checking if elements where moved in some other place
    // and saving old positions
    var new_draggables = new Array();
    var old_positions = new Array();

    for (var i=0, length=this.draggables.length; i<length; i++) {
      element_id = this.draggables[i].id;
      if (this.arrayPosition(new_positions, element_id) != -1) {
        new_draggables.push(this.draggables[i]);
      }
      old_positions.push(element_id);
    }

    this.draggables = new_draggables;

    switch (this.display_format) {
      case 'detail':
      case 'detail_tab':
        // getting table lines
        var table = document.getElementById(this.folder_content);
        var tbody = table.getElementsByTagName('tbody')[0];
        var rows = document.getElementsByClassName('ajaxtd');
        var rowArray = new Array();

        for (var i=0, length=this.draggables.length; i<length; i++) {
            current_id = this.draggables[i].id;
            rowArray[i] = new Object;
            rowArray[i].oldIndex = this.arrayPosition(old_positions, current_id);
            rowArray[i].value = this.arrayPosition(new_positions, current_id);
        }

        // sorting
        rowCompareBn = this.rowCompare.bind(this);
        rowArray.sort(rowCompareBn);

        // recreating the tbody tree
        var newTbody = document.createElement('tbody');
        for (var i=0, length=rowArray.length; i<length; i++) {
            new_node = rows[rowArray[i].oldIndex].cloneNode(true)

            // replacing odd-even order
            if (this.display_format=='detail_tab') {
              classname = new_node.className;
              if (classname.indexOf('odd')!=-1) {
                // am i really odd ?
                if (i % 2 == 0) {
                  // nope, changing
                  new_node.className = new_node.className.replace('odd', 'even');
                }
              }
              if (classname.indexOf('even')!=-1) {
                // am i really even ?
                if (i % 2 != 0) {
                  // nope, changing
                  new_node.className = new_node.className.replace('even', 'odd');
                }
              }
            }

            newTbody.appendChild(new_node);
        }
        table.replaceChild(newTbody, tbody);

        // replacing elements
        objects = document.getElementsByClassName(this.draggable_class);
        for (var i=0, length=objects.length; i<length; i++) {
            object = objects[i];
            object.style.top = 0;
            object.style.left = 0;
            object.style.transparency = 0;
        }

        if (container_events) {
          container_events.triggerEvent('element_dropped');
        }
        break;

      case 'icon':
        // change the icon view
        break;
      case 'compact':
        // change the icon view
        break;
    }

    this.unHookElements();
    this.hookElements();
    this.onComplete();
  },

  onDropElement: function(element, droppableElement) {
    var from_id = element.id;
    var to_id = droppableElement.id;

    if (from_id == to_id.replace('droppable', 'draggable')||
        from_id == to_id.replace('droppable-in', 'draggable'))
      return;

    var params = 'from_id=' + from_id + '&to_id=' + to_id;
    url = 'ajaxMoveElement';
    var dropElementCompletedBn = this.dropElementCompleted.bind(this);
    var options = {parameters: params, onComplete: dropElementCompletedBn};

    this.last_from_id = from_id;
    this.last_to_id = to_id.replace('droppable-in', 'draggable');
    this.last_to_id = to_id.replace('droppable', 'draggable');
    this.onCreate();
    var sender = new Ajax.Request(url, options);
  },

  onCreate: function() {
    if ($(this.ajax_psm)) {
      var elt = $(this.ajax_psm);
      elt.style.background = '';
      elt.innerHTML = this.working_text;
      Effect.Appear(this.ajax_psm, {duration:0.5, queue:'end'});
    }
  },

  onComplete: function() {
    if ($(this.ajax_psm)) {
      Effect.Fade(this.ajax_psm, {duration:1.5, queue:'end'});
    }
  },

  onFail: function(message) {
    if ($(this.ajax_psm)) {
      var elt = $(this.ajax_psm);
      elt.innerHTML = this.generic_error_msg;
      elt.style.background = 'red';
      Effect.Pulsate(this.ajax_psm, {duration:1.5, queue:'end'});
      Effect.Fade(this.ajax_psm, {duration:1.5, queue:'end'});
    }
  }
}


/* helpers */

function setCursor(obj, cursor)
{
  if (!cursor || cursor=="hand" || cursor=="pointer") {
    if (navigator.appName == "Microsoft Internet Explorer")
      isIE = true;
    else
      isIE = false;
    cursor = isIE ? "hand" : "pointer";
  }

  obj.style.cursor = cursor;
}


/* event manager */

var CPSContainerEvents = Class.create();

CPSContainerEvents.prototype = {
  initialize: function() {
  },

  observers: false,

  observeEvent: function(event_id, observer_id, observer_listener) {
    if (!this.observers) this.observers = [];
    this.observers.push([event_id, observer_id, observer_listener]);
  },

  stopObservingEvent: function(event_id, observer_id) {
    for (var i = 0; i < this.observers.length; i++) {
      if (this.observers[i][0] == event_id &&
          this.observers[i][1] == observer_id ) {
        this.observers[i][0] = null;
      }
    }
  },

  purgeObservers: function() {
    this.observers = false;
  },

  triggerEvent: function(event_id) {
    if (!this.observers)
      return;
    for (var i = 0; i < this.observers.length; i++) {
      if (this.observers[i][0] == event_id) {
        this.observers[i][2](event_id, this.observers[i][1]);
      }
    }
  }

}

/* global instance */
var container_events = new CPSContainerEvents();
