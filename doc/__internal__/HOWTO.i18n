CPS and i18n
  $Id$

  This documents gives rules and hints for translating CPS 3 and third-party
  products.


Tools used

  We use a combination of "Localizer":http://www.j-david.net/software/localizer
  and "TranslationService":http://www.zope.org/Members/efge/TranslationService.
  These products are shipped with CPS.

  nuxeo_env package provides you 2 tools : make_pot and update_pos to help you
  managing the pot/po files. (See the related section below)

  Messages are stored in a MessageCatalog object inside the
  Localizer instance. Hence, the translation_service object hold paths to
  MessageCatalog objects like "Localizer/default".

  We use only the "default" domain for CPSDefault and all the required
  products, this means that we have only one MessageCatalog.

  CPSDefault skins do not provide a 'i18n:domain' attribute or at least the
  "default".

  For python script file we have to use this syntax ::

    mcat = context.Localizer.default

  This is our rules until we know how to work with domain :/



Guide to Prefixes your msgid (mostly from plone i18n guideline)

    msgid is a short name like the one you would use for a variable.

    We added certain standard prefixes for IDs so you can understand where they
are used (semantic differences are easier to spot this way), and easily locate
them. Sorted the IDs will be grouped by type automatically.

   * heading_ - for page headings
   * description_ - for the description directly below the headings
   * legend_ - for the group/fieldset legends
   * label_ - for labels, both field labels and input labels
   * help_ - the pop-up help text
   * box_ - for content in Plone Boxes (navigation box etc)
   * listingheader_ - for headers in listings (tables of class
     "listing", the normal way to list items in Plone)
   * time_ - for time-related stuff that can be reused - "Yesterday",
     "Last week" etc
   * batch_ - for batch-related things - like "Displaying X to Y of Z
     total documents"
   * portal_type_ - for portal type name
   * action_ - for action name
   * psm_ - for portal status message

    There are also Product-specific prefixes, eg. the Product ZWiki has a
heading, then the prefix would be |zwiki_heading_edit_wiki_page|. This prevents
collision between Message IDs.


How to translate:

  - zpt static sentences:

    Use msgid !

      <p i18n:translate="help_join">Becoming a member gives [...]</p>

    Be sure to be specific, it would have been a mess to use "help_message" in
    the former example.

  - zpt dynamic sentences:

    Msgids are not always convenient. For sentences like:

      <h2>Edit <span tal:replace="doc/getId" /></h2>

    We must leave the sentence as-is and use the i18n:name attribute::

      <h2 i18:translate="">Edit <span tal:replace="doc/getId"
                                      i18n:name="item_id" /></h2>

    here the msgid to translate is 'Edit ${item_id}'

    for dynamic keywork like :

    <span tal:omit-tag="" tal:content="items/action" i18n:translate="_dynamic_">Action</span>


  - zpt tags' attributes:

    Form tags use a 'value' attribute to set the msgid

    <input type="submit" i18n:attributes="value" value="button_search" />


  - For the portal status message:

    Typically, this sentence is sent as is by a redirect call. a
    i18n:translate="" attribute is place in main_template so the entire sentence
    is stored (no msgid).

    As a consequence, do not use computed sentences like "5 items deleted." or
    "please correct the following fields: [...]". Keep it simple like
    psm_item_deleted or psm_error_found


  - For portal types:

    Given the portal_type id, use 'portal_type_%s_title' % id as the title and
    'portal_type_%s_description" % id as the description. For instance, the
    portal type 'newsdocument' is given 'portal_type_newsdocument_title' as the
    title.

    Don't bother for other products you try to integrate if they have a title in
    plain english. We want msgids in CPSDefault at least.

  - For portal types' actions:

    Actions should use msgid as well: typically named "action_view" or "action_reply".

  - For dates:

    XXX how do we specify/ where do we write the date format ?

  - cps proxies:

    Proxies handle translation by themselves so don't place i18n:translate=""
    around the title.


--------------------------------------------------
Rules to generate pot/pos files and updating them
--------------------------------------------------

  Included in the nuxeo_env package you'll find 2 tools preventing the use
  of Localizer for performing the translations.
  We'll still use the import feature of Localizer when the translation will
  be done.

  The tools :
     1) make_pot   : Initialization (see the scenario below)
     2) update_pos : If your ZPT's change or you wanna add some msgids

  Check the HOWTO.INSTALL_CPS3 for the package that must be installed in order
  to make these tools working.

  The idea is to parse directly the ZPTs, extracting the content of the i18n
  tags and generating the pot/po files for a product.

  It basically use : GNU Gettext, OpenTAL, pax (XML parser) and OpenPTi18n.
  For this last use the one within dev2 cause I did some changes on the
  original one for convenience. The package is called OpenPTi18n-nuxeo.
  You'll find this one within dev2 /home/download/_packages directory.

  Scenarios
  ----------

  -- Initialization --

     1) Create a subdirectory named i18n/ in your product directory.
     2) launch the tool make_pot within this one. IT WILL  :
        a) Parse the ZPTs and generate a xxxproduct.pot (pot template file)
        b) Create an en.po and fr.po from the pot template.
           (DO NOT EDIT THIS ONE AFTER)
        c) Create a custom.pot file where you will put you self the needed
           translation from dynamic content.
           Idea : Display your ZPT on the site and check in Localizer the
                  needed translations but don't export with Localizer anymore !)
     3) Translate the local files (en/fr.po) with the help of tool such as
        kbabel or still emacs mode.
     4) Update the Localizer catalog

  -- Update with some add-ons in the custom.pot --

    1) Put the msgids in the custom.pot file
    2) Launch the second tool : update_pos within the i18n directory.
    3) Update the Localizer catalog

  -- Update : Your ZPT's changed --

    1) Change your ZPT's
    2 Launch the update_pos within the i18n directory.
    3) That's it ! Update with Localizer.

  -- DEBUG mode with make_pot --

    You might find useful the debug mode of make_pot if your ZPTs contained errors.
    It means if you didn't set the i18n tags properly.

    It will be use if you get some errors with make_pot.

    make_pot can feed one directory or one single file : make_pot <file|directory>
    It will check all the ZPTs within directory and will inform you which one
    are not well formed (By mean of i18n tags)

   Like that, if errors occurred use the debug mode, correct the ZPT's and relaunch make_pot
   or update_pos if you are in update mode.
   Notice that in debug mode you won't get any pot/po files.

More Generally

 // The tools will be launched within the i18n subdirectory of your
    XxxProduct.

 // Use make_pot the first time when you wanna start the
    internationalization of your product. You'll get all the necessarily
    files

 // Translate the local files (en/fr)

 // Use update_pos after some changes occurs within your ZPTs or still
    of you added msgids within the custom.pot file.

 // Update the catalog. To be defined later.
