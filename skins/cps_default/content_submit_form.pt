<metal:html use-macro="here/content_lib_master/macros/master">

<metal:block fill-slot="header" />

<metal:main fill-slot="main">
<metal:std_main use-macro="here/content_lib_std_main/macros/std_main">

<metal:title fill-slot="title" i18n:translate="">
  heading_submit_of
  <span tal:replace="here/title_or_id" i18n:name="item_id">Item</span>
</metal:title>

<metal:help fill-slot="help">
  <tal:block i18n:translate="help_publish_publication">To make an item viewable
  by readers it has to be published. You can publish this item directly
  in the sections where you are entitled to  without requiring any reviewing.<br />
  A copy of the item will be created into each of these sections with the
  <strong>published</strong>status. Section readers of those sections will then be
  able to read it.<br />
  You can also submit the item in the section folders where you are not
  entitled to publish directly.<br /> A copy of the item will be created into
  each of these sections with a <strong>pending</strong> status, waiting to be
  reviewed and finally <strong>published</strong> by a section's reviewer.</tal:block>
</metal:help>

<metal:main fill-slot="main"
            tal:define="global info python:proxy.getContentInfo(proxy, doc=doc, level=3);
                        workflow_action_script string:content_status_modify;
                        publish_wf_action string:publish;
                        submit_wf_action string:submit;
                        start_wf_action string:copy_submit;">

  <metal:block use-macro="here/content_lib_status/macros/status" />

  <metal:block use-macro="here/content_lib_transition_form/macros/transition_form">
    <metal:block fill-slot="fields"
                 tal:define="stree python: here.getSectionsTree()">
      <table width="100%" cellspacing="0" cellpadding="2"
        summary="sections listing">
        <tr>
          <th i18n:translate="listingheader_sections">Section</th>
          <th i18n:translate="listingheader_existing_revision">
            Existing revision of the same document
          </th>
        </tr>
        <tal:block repeat="section stree">
          <tr tal:define="publishing_transitions section/publishing_transitions;
                          can_publish python:publish_wf_action in publishing_transitions;
                          can_submit  python:submit_wf_action in publishing_transitions;
                          clone_wf_action python:test(can_publish, publish_wf_action, submit_wf_action);
                          states_for_section python:[state for state in info['states'] if state['rpath'] == section['rpath']]"
              tal:condition="python:can_publish or can_submit"
              tal:attributes="class python:test(repeat['section'].even(), 'even', 'odd')">
            <td>
              <input type="checkbox" id="" name="" value="" class="noborder"
                     tal:attributes="value section/rpath;
                                     id section/rpath;
                                     name clone_wf_action;
                                     checked python:states_for_section and 'checked' or None" />
              <span tal:replace="structure python:'&nbsp;'*4*section['depth']">&nbsp;</span>
              <label tal:content="structure section/short_title"
                     tal:attributes="for section/rpath">Section id</label>
              <em i18n:translate="label_requires_approval"
                  tal:condition="not:can_publish">(requires approval)</em>
            </td>
            <td>
              <tal:block repeat="info states_for_section"
                         define="status_short_fmt not:nothing">
                <metal:block
                  use-macro="here/content_lib_status/macros/status" /><br />
              </tal:block>
            </td>
          </tr>
        </tal:block>
      </table>
    </metal:block>

    <metal:block fill-slot="button">
      <input type="hidden" name="workflow_action" value="submit"
             tal:attributes="value start_wf_action" />
      <input type="submit" class="standalone" value="button_submit_document"
        i18n:attributes="value" />
      <input type="button" class="context" onclick="history.back()"
        value="button_cancel" i18n:attributes="value" />
    </metal:block>

  </metal:block>

  <metal:block use-macro="here/content_lib_states/macros/states" />

  <metal:block use-macro="here/content_lib_history/macros/history" />
</metal:main>
</metal:std_main>
</metal:main>
</metal:html>
