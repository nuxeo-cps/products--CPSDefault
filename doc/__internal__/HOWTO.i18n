CPS and i18n
  $Id$

  This documents gives rules and hints for translating CPS 3 and third-party
  products.


  Using Zope i18n tag/translation_service/multi domain pros(+) and cons(-):

    + clean .po and .pot file generated by localizer

    + better integration with tal

    + following cmf dev

    - find a message is not easy as there is no search over multiple domain
        you should read the zpt and find the message
        (msgid/content and i18:name) and find the domain
        then go to zmi select the mcat then search

    - the only way to check if a page is fully i18n is to try to implement
        a non 'en' local

    - to produce the en.po you need to translate 2 time once in the zpt
        then in the en locale, not producing a en.po mean extra work latter
        to override english translation

    - when translating tag with localizer you have no context
        you should grep and visualize sources to accomplish the translation

    - exporting .po or .pot from localizer means that one domain = one mcat
        and make complex init loader

    - you need to copy the locale that you want to override
        or peraps make a loader that don't erase the mcat but just update

    - you still need mcat command for python script or complexe translation
        in this case you should know the mcat name this mean assuming that
        mcat name=domain name

    - bug in localizer cf Localizer TODO:
       "Also found that using the import/export function in Localizer/zope
        can bring corruption to the po file, a problem with the accents it
        seems."

  Using domain:
    - pot extrator do not handle domain -> only one domain per product
    - one domain/product duplicate common translation

  no using domain:
    + ez search
    + ez mcat definition
    + ez loader
    - update one .po means rebuild all mcat importing *.po


  History:

    - refactored the part about portal types

    - completed the part about sentences

    - added a note about dates

    - added a note about boxes

    - first draft

Tools used

  We use a combination of "Localizer":http://www.j-david.net/software/localizer
  and "TranslationService":http://www.zope.org/Members/efge/TranslationService.
  These products are shipped with CPS.

  Messages are stored in MessageCatalog objects. They and instancied inside the
  Localizer instance. Hence, the translation_service object hold paths to
  MessageCatalog objects like "Localizer/default".

  We use the "default" domain for CPSDefault with its associated catalog. You
  must use another catalog and domain if your product is not designed to be
  shipped with CPSDefault.

  CPSDefault skins do not provide a 'i18n:domain' attribute or at least the
  "default" if you must specify one (does it work or this name is kind of a
  magic ?).

  other skins must provide a i18n domain not to mix CPSDefault messages with
  your own. Typically, you would use::

    <html i18n:domain="productname">

  and declare this domain and its associated catalog in the translation_service
  object.

  For python script file we have to use this syntax for the moment::

    mcat = context.Localizer.productname

  In near future it will be::

    mcat = context.translation_service

  And with translation_service it will be possible to also pass a domain
  and substitution variables, whereas the current usage of calling
  directly a message catalog doesn't give us the automatic domain
  flexibility.

What to translate and how

  - For sentences:

    At most, we use a msgid, e.g. a short name like the one you would use for a variable.
    For instance::

      <p i18n:translate="help_join">Becoming a member gives [...]</p>

    Be sure to be specific, it would have been a mess to use "help_message" in
    the former example.

    Msgids are not always convenient. For sentences like::

      <h2>Edit <span tal:replace="doc/getId" /></h2>

    We must leave the sentence as-is and use the i18n:name attribute::

      <h2 i18:translate="">Edit <span tal:replace="doc/getId"
                                      i18n:name="item_id" /></h2>

  - For the portal status message:

    Typically, this sentence is sent as is by a redirect call. a
    i18n:translate="" attribute is place in main_template so the entire sentence
    is stored (no msgid).

    As a consequence, do not use computed sentences like "5 items deleted." or
    "please correct the following fields: [...]". Keep it simple as in
    CMFDefault, use "Items deleted." and "Errors found.".

  - For tags' attributes:

    Form tags use a 'value' attribute. For now, we keep its content in plain
    english and provide a i18n:attribute="value". I will inspect the new syntax
    where i18n:attribute can work with a msgid.

  - A note about proxies:

    Proxies handle translation by themselves so don't place i18n:translate=""
    around the title.

  - For portal types:

    Given the portal_type id, use 'portal_type_%s_title' % id as the title and
    'portal_type_%s_description" % id as the description. For instance, the
    portal type 'newsdocument' is given 'portal_type_newsdocument_title' as the
    title.

    Don't bother for other products you try to integrate if they have a title in
    plain english. We want msgids in CPSDefault at least.

  - For portal types' actions:

    Actions are typically named "View" or "Reply". Keep it in plain english (a
    la CMF) so that any product will have its basic "View", "Edit", ... methods
    already translated.

  - For boxes:

    Avoid automating the translation by using an i18n:translate in the box
    macros since it would make no sense for some titles. These specific titles
    coud be the user's name or a section/workgroup's title (remember proxies
    handle translation by themselves).

  - For dates:

    XXX how do we specify/ where do we write the date format ?

Where to save translation files

  We have to obtain a file named 'locate.pot' by parsing the source files. This
  file will be, say, 75% in english and 25% with msgids that are to be
  translated in this single file.

  This file 'locale.pot' is versionned using CVS and another file named
  'i18n-history.txt' that keep track of new and obsolete msgids.

  XXX We need scripts (in bash/python/whatever) to automate the production of
  this file.

  When you want to translate, copy this file to a file named 'xx.po' where 'xx'
  is the 2-letter code of your language (e.g. fr or de) and fill in the msgstrs.

  All these files are to be placed in an 'i18n' directory.

  We will see later how to import then with cpsinstall/cpsupdate external
  methods.
